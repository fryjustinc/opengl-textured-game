#ifndef __RENDERENGINE
#define __RENDERENGINE

#include <SFML/Graphics.hpp>
#include "glm/glm.hpp"
#include "glm/gtc/matrix_transform.hpp"
#include "GLHelper.h"
#include "Map.h"

class RenderEngine
{
public:
	Map map;
	unsigned int w;
	unsigned int h;
	
	RenderEngine()
	{

		initialized = false;
		this->P = glm::ortho(-1, 1, -1, 1);

	}

	~RenderEngine()
	{
		if(initialized)
		{
			// Clean up the buffers
			glDeleteBuffers(1, &positionBuffer);
			glDeleteVertexArrays(1, &vertexArray);
		}
	}

	void init(unsigned int const & w, unsigned int const & h)
	{
		time = 0;
		this->w = w;
		this->h = h;
		
		

		setupGlew();
		setupTextures();
		setupShader();
		generateMap();
		initialized = true;
	}

	void generateMap(){
		Map map();
		this->P = glm::perspective(90.0f, 1.0f, 0.1f, 2.0f*30.0f);

		if(initialized)
			rebuildBuffers();
		else
			setupBuffers();
	}

	void display(bool pickingEnabled=false)
	{
		M = glm::mat4(1.0);
		time++;
		glEnable(GL_DEPTH_TEST);
		//clear the old frame
		glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
		
		//use shader
		glBindVertexArray(vertexArray);
		glUseProgram(shaderProg);
		glUniform1f(timeSlot, time);
		glUniformMatrix4fv(inverseSlot, 1, GL_FALSE, &glm::transpose(glm::inverse(V*M))[0][0]);
		glUniformMatrix4fv(matSlot1, 1, GL_FALSE, &P[0][0]);
		glUniformMatrix4fv(matSlot2, 1, GL_FALSE, &V[0][0]);
		
		//Textures
		
		int numQuads = map.getVertexCount()/6;
		
		//draw
		//glDrawArrays(GL_TRIANGLES, 0, map.positions.size());
		for(int i=0; i<numQuads; i++){
			GLint texUnitId = 0;
			glUniform1i(glGetUniformLocation(shaderProg, "texUnit"), texUnitId);

			glActiveTexture(GL_TEXTURE0+texUnitId);
			glBindTexture(GL_TEXTURE_2D, textures[0]); //This is then number that controls what texture image is used.
			glDrawArrays(GL_TRIANGLES, 6*i, 6);
		}

		//cleanup
		glBindVertexArray(0);
		glUseProgram(0);
		checkGLError("display");
	}
	
	

	void reshape(int const & newWidth, int const & newHeight)
	{
		glViewport(0, 0, newWidth, newHeight);
	}
	void setTransform(glm::mat4 trans){
		this->M = trans;
	}
	void setView(glm::mat4 view){
		this->V = view;
	}
	void setProjection(glm::mat4 project){
		this->P = project;
	}



private:

	bool initialized;

	GLuint shaderProg;
	GLfloat time;
	GLuint positionBuffer;
	GLuint vertexArray;
	GLuint normalBuffer;
	GLuint texCoordBuffer;

	GLint inverseSlot;
	GLint positionSlot;
	GLint normalSlot;
	GLint texCoordSlot;
	GLint timeSlot;
	GLint matSlot1;
	GLint matSlot2;
	GLint matSlot3;
		
	glm::mat4 P;
	glm::mat4 V;
	glm::mat4 M;

	GLuint textures[3];

	void setupGlew()
	{
		glewExperimental = GL_TRUE;
		GLenum err = glewInit();
		if (GLEW_OK != err)
		{
			fprintf(stderr, "Error: %s\n", glewGetErrorString(err));
			exit(1);
		}
		printf("Using GLEW %s\n", glewGetString(GLEW_VERSION));
	}

	void setupTextures()
	{
		//generate texture names
		sf::Image image;

		glGenTextures(3, textures);
		char * imagePaths[3] = {"Images/Seamless Stone wall texture.jpg", "Images/ground.jpg", "Images/plywood.jpg"};

		for(int i=0; i<3; i++)
		{
			image.LoadFromFile(imagePaths[i]);
			int texSizeX = image.GetWidth();
			int texSizeY = image.GetHeight();
			unsigned char * texData = (unsigned char*) image.GetPixelsPtr();
			glBindTexture(GL_TEXTURE_2D, textures[i]);

			//control sampling
			glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST_MIPMAP_LINEAR);
			glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST_MIPMAP_NEAREST);
						
			//control boundaries
			glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP);
			glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP);

			#define MIPMAP_ENABLED true
			#define GL30_SUPPORTED true //set this as appropriate
			#define GL14_SUPPORTED false //set this as appropriate
			if(MIPMAP_ENABLED && GL30_SUPPORTED)
			{
				glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, texSizeX, texSizeY, 0, GL_RGBA, GL_UNSIGNED_BYTE, texData);
				glGenerateMipmap(GL_TEXTURE_2D);
			}	
			else if(MIPMAP_ENABLED && GL14_SUPPORTED)
			{
				glTexParameteri(GL_TEXTURE_2D, GL_GENERATE_MIPMAP, GL_TRUE);
				glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, texSizeX, texSizeY, 0, GL_RGBA, GL_UNSIGNED_BYTE, texData);
			}
			else if(MIPMAP_ENABLED)
			{
				gluBuild2DMipmaps(GL_TEXTURE_2D, GL_RGBA, texSizeX, texSizeY, GL_RGBA, GL_UNSIGNED_BYTE, texData);
			}
			else
			{
				glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, texSizeX, texSizeY, 0, GL_RGBA, GL_UNSIGNED_BYTE, texData);
			}

			glBindTexture(GL_TEXTURE_2D, 0);
		}

		checkGLError("texture");
	}

	void setupShader()
	{
		char const * vertPath = "Shaders/simple.vert";
		char const * fragPath = "Shaders/simple.frag";

		shaderProg = ShaderManager::shaderFromFile(&vertPath, &fragPath, 1, 1);

		// Find out where the shader expects the data
		positionSlot = glGetAttribLocation(shaderProg, "pos");
		normalSlot = glGetAttribLocation(shaderProg, "norm");
		texCoordSlot = glGetAttribLocation(shaderProg, "texCoord");
		matSlot1 = glGetUniformLocation(shaderProg, "P");
		matSlot2 = glGetUniformLocation(shaderProg, "V");
		matSlot3 = glGetUniformLocation(shaderProg, "M");
		inverseSlot = glGetUniformLocation(shaderProg, "inverse");
		timeSlot = glGetUniformLocation(shaderProg, "time");
		checkGLError("shader");
	}

	void setupBuffers()
	{

		glGenVertexArrays(1, &vertexArray);

		glBindVertexArray(vertexArray);
		//setup position buffer
		glGenBuffers(1, &positionBuffer);
		glBindBuffer(GL_ARRAY_BUFFER, positionBuffer);
		glBufferData(GL_ARRAY_BUFFER, map.getPositionBytes(), map.getPosition(), GL_STATIC_DRAW);
		glBindBuffer(GL_ARRAY_BUFFER, 0);

		glGenBuffers(1, &normalBuffer);
		glBindBuffer(GL_ARRAY_BUFFER, normalBuffer);
		glBufferData(GL_ARRAY_BUFFER, map.getNormalBytes(), map.getNormals(), GL_STATIC_DRAW);
		glBindBuffer(GL_ARRAY_BUFFER, 0);

		glGenBuffers(1, &texCoordBuffer);
		glBindBuffer(GL_ARRAY_BUFFER, texCoordBuffer);
		glBufferData(GL_ARRAY_BUFFER, map.getTexCoordBytes(), map.getTexCoords(), GL_STATIC_DRAW);
		glBindBuffer(GL_ARRAY_BUFFER, 0);

		glBindBuffer(GL_ARRAY_BUFFER, positionBuffer);
		glEnableVertexAttribArray(positionSlot);
		glVertexAttribPointer(positionSlot, 3, GL_FLOAT, GL_FALSE, 0,(void*) 0);

		glBindBuffer(GL_ARRAY_BUFFER, normalBuffer);
		glEnableVertexAttribArray(normalSlot);
		glVertexAttribPointer(normalSlot, 3, GL_FLOAT, GL_FALSE, 0, (void*) 0);

		glBindBuffer(GL_ARRAY_BUFFER, texCoordBuffer);
		glEnableVertexAttribArray(texCoordSlot);
		glVertexAttribPointer(texCoordSlot, 2, GL_FLOAT, GL_FALSE, 0, 0);

		glBindVertexArray(0);
		
		checkGLError("setup");
	}
	
	void rebuildBuffers()
	{
		
		glBindBuffer(GL_ARRAY_BUFFER, positionBuffer);
		glBufferSubData(GL_ARRAY_BUFFER, 0, map.getPositionBytes(), map.getPosition());
		

		glBindVertexArray(vertexArray);	
		glBindBuffer(GL_ARRAY_BUFFER, positionBuffer);
		glEnableVertexAttribArray(positionSlot);
		glVertexAttribPointer(positionSlot, 3, GL_FLOAT, GL_FALSE, 0, 0);
		
		glBindVertexArray(0);
		
		checkGLError("rebuild");
	}
};

#endif